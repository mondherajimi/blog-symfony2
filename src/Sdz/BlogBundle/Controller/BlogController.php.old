<?php

// src/Sdz/BlogBundle/Controller/BlogController.php

namespace Sdz\BlogBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;
use Sdz\BlogBundle\Entity\Article;
use Sdz\BlogBundle\Entity\Image;
use Sdz\BlogBundle\Entity\Commentaire;
use Sdz\BlogBundle\Entity\ArticleCompetence;

class BlogController extends Controller
{
  public function indexAction($page)
  {
    // On fixe un id au hasard ici, il sera dynamique par la suite, évidemment
    // $id = 5;

    // On veut avoir l'URL de l'article d'id $id.
    // $url = $this->generateUrl('sdzblog_voir', array('id' => $id));
    // $url vaut « /blog/article/5 »

    // On redirige vers cette URL (ça ne sert à rien, on est d'accord, c'est pour l'exemple !)
    // return $this->redirect($url);
	// return $this->render('SdzBlogBundle:Blog:index.html.twig', array('article_id' => 'winzou'));
	
	 // On ne sait pas combien de pages il y a
    // Mais on sait qu'une page doit être supérieure ou égale à 1
    if( $page < 1 )
    {
      // On déclenche une exception NotFoundHttpException
      // Cela va afficher la page d'erreur 404 (on pourra personnaliser cette page plus tard d'ailleurs)
      throw $this->createNotFoundException('Page inexistante (page = '.$page.')');
    }

    // Ici, on récupérera la liste des articles, puis on la passera au template

    // Mais pour l'instant, on ne fait qu'appeler le template
    // return $this->render('SdzBlogBundle:Blog:index.html.twig');
	// return $this->render('SdzBlogBundle:Blog:index.html.twig', array('articles' => array()));
	 // Les articles :
  $articles = array(
    array(
      'titre'   => 'Mon weekend a Phi Phi Island !',
      'id'      => 1,
      'auteur'  => 'winzou',
      'contenu' => 'Ce weekend était trop bien. Blabla…',
      'date'    => new \Datetime()),
    array(
      'titre'   => 'Repetition du National Day de Singapour',
      'id'      => 2,
      'auteur' => 'winzou',
      'contenu' => 'Bientôt prêt pour le jour J. Blabla…',
      'date'    => new \Datetime()),
    array(
      'titre'   => 'Chiffre d\'affaire en hausse',
      'id'      => 3, 
      'auteur' => 'M@teo21',
      'contenu' => '+500% sur 1 an, fabuleux. Blabla…',
      'date'    => new \Datetime())
  );
    // On récupère le service
    $antispam = $this->container->get('sdz_blog.antispam');
$text="aaaa@gmail.com aaaa@gmail.com";
    // Je pars du principe que $text contient le texte d'un message quelconque
    if ($antispam->isSpam($text)) {
      throw new \Exception('Votre message a été détecté comme spam !');
    }

    // Le message n'est pas un spam, on continue l'action… 
  // Puis modifiez la ligne du render comme ceci, pour prendre en compte nos articles :
  return $this->render('SdzBlogBundle:Blog:index.html.twig', array(
    'articles' => $articles
  ));
  }
   public function voirAction($id)
  {
    // $id vaut 5 si l'on a appelé l'URL /blog/article/5
        
    // Ici, on récupèrera depuis la base de données l'article correspondant à l'id $id
    // Puis on passera l'article à la vue pour qu'elle puisse l'afficher

     // On récupère la requête
    // $request = $this->getRequest();

    // On récupère notre paramètre tag
    // $tag = $request->query->get('tag');

    // return new Response("Affichage de l'article d'id : ".$id.", avec le tag : ".$tag);
    
	// On crée la réponse sans lui donner de contenu pour le moment
    // $response = new Response;

    // On définit le contenu
    // $response->setContent('Ceci est une page d\'erreur 404');

    // On définit le code HTTP
    // Rappelez-vous, 404 correspond à « page introuvable »
    // $response->setStatusCode(404);

    // On retourne la réponse
    // return $response;
	
	// On utilise le raccourci : il crée un objet Response
    // Et lui donne comme contenu le contenu du template
    // return $this->render('SdzBlogBundle:Blog:voir.html.twig', array('id'  => $id,));
	
	 // On utilise la méthode « generateUrl() » pour obtenir l'URL de la liste des articles à la page 2
    // Par exemple
    // return $this->redirect( $this->generateUrl('sdzblog_accueil', array('page' => 2)) );
	
	// Créons nous-mêmes la réponse en JSON, grâce à la fonction json_encode()
    // $response = new Response(json_encode(array('id' => $id)));

    // Ici, nous définissons le Content-type pour dire que l'on renvoie du JSON et non du HTML
    // $response->headers->set('Content-Type', 'application/json');

    // return $response;

    // Nous n'avons pas utilisé notre template ici, car il n'y en a pas vraiment besoin
	
	 // Récupération du service
    // $mailer = $this->get('mailer');

    // Création de l'e-mail : le service mailer utilise SwiftMailer, donc nous créons une instance de Swift_Message
    // $message = \Swift_Message::newInstance()
      // ->setSubject('Hello zéro !')
      // ->setFrom('am27271@topnet.tn')
      // ->setTo('mondher.ajimi83@gmail.com')
      // ->setBody('Coucou, voici un email que vous venez de recevoir !');

    // Retour au service mailer, nous utilisons sa méthode « send() » pour envoyer notre $message
    // $mailer->send($message);

    // N'oublions pas de retourner une réponse, par exemple une page qui afficherait « L'e-mail a bien été envoyé »
    // return new Response('Email bien envoyé');
	
	 // Récupération du service
  // $templating = $this->get('templating');

  // On récupère le contenu de notre template
  // $contenu = $templating->render('SdzBlogBundle:Blog:voir.html.twig');

  // On crée une réponse avec ce contenu et on la retourne
  // return new Response($contenu);
  
   // Récupération du service
    // $session = $this->get('session');
    
    // On récupère le contenu de la variable user_id
    // $user_id = $session->get('user_id');

    // On définit une nouvelle valeur pour cette variable user_id
    // $session->set('user_id', 91);

    // On n'oublie pas de renvoyer une réponse
    // return new Response('Désolé je suis une page de test, je n\'ai rien à dire');
	
	// return $this->render('SdzBlogBundle:Blog:voir.html.twig', array( 'id'  => $id));
	// $article = array(
    // 'id'      => 1,
    // 'titre'   => 'Mon weekend a Phi Phi Island !',
    // 'auteur'  => 'winzou',
    // 'contenu' => 'Ce weekend était trop bien. Blabla…',
    // 'date'    => new \Datetime()
  // );
    
  // Puis modifiez la ligne du render comme ceci, pour prendre en compte l'article :
  // return $this->render('SdzBlogBundle:Blog:voir.html.twig', array( 'article' => $article));
   // On récupère le repository
  // $repository = $this->getDoctrine()
                     // ->getManager()
                     // ->getRepository('SdzBlogBundle:Article');

  // On récupère l'entité correspondant à l'id $id
  // $article = $repository->find($id);

  // $article est donc une instance de Sdz\BlogBundle\Entity\Article
// $article = $this->getDoctrine()
                // ->getManager()
                // ->find('SdzBlogBundle:Article', $id); // 1er argument : le nom de l'entité
                                                      // 2e argument : l'id de l'instance à récupérer
   // On récupère l'EntityManager
    $em = $this->getDoctrine()
               ->getManager();

    // On récupère l'entité correspondant à l'id $id
    $article = $em->getRepository('SdzBlogBundle:Article')
                  ->find($id);
  // Ou null si aucun article n'a été trouvé avec l'id $id
  if($article === null)
  {
    throw $this->createNotFoundException('Article[id='.$id.'] inexistant.');
  }
    
  // return $this->render('SdzBlogBundle:Blog:voir.html.twig', array(
    // 'article' => $article
  // ));
   // On récupère la liste des commentaires
    $liste_commentaires = $em->getRepository('SdzBlogBundle:Commentaire')
                             ->findAll();
    
	 // On récupère les articleCompetence pour l'article $article
    $liste_articleCompetence = $em->getRepository('SdzBlogBundle:ArticleCompetence')
                            ->findByArticle($article->getId());
    // Puis modifiez la ligne du render comme ceci, pour prendre en compte l'article :
    return $this->render('SdzBlogBundle:Blog:voir.html.twig', array(
      'article'		   => $article,
      'liste_commentaires' => $liste_commentaires,
	  'liste_articleCompetence'	 => $liste_articleCompetence,
    ));
  }
   public function ajouterAction()
  {
    // Bien sûr, cette méthode devra réellement ajouter l'article
    // Mais faisons comme si c'était le cas
    // $this->get('session')->getFlashBag()->add('info', 'Article bien enregistré');

    // Le « flashBag » est ce qui contient les messages flash dans la session
    // Il peut bien sûr contenir plusieurs messages :
    // $this->get('session')->getFlashBag()->add('info', 'Oui oui, il est bien enregistré !');
        
    // Puis on redirige vers la page de visualisation de cet article
    // return $this->redirect( $this->generateUrl('sdzblog_voir', array('id' => 5)) );
	
	 // La gestion d'un formulaire est particulière, mais l'idée est la suivante :
    
    // if( $this->get('request')->getMethod() == 'POST' )
    // {
      // Ici, on s'occupera de la création et de la gestion du formulaire
      
      // $this->get('session')->getFlashBag()->add('notice', 'Article bien enregistré');
    
      // Puis on redirige vers la page de visualisation de cet article
      // return $this->redirect( $this->generateUrl('sdzblog_voir', array('id' => 5)) );
    // }

    // Si on n'est pas en POST, alors on affiche le formulaire
    // return $this->render('SdzBlogBundle:Blog:ajouter.html.twig');
	
	    // Création de l'entité
    // $article = new Article();
    // $article->setTitre('Mon dernier weekend');
    // $article->setAuteur('Bibi');
    // $article->setContenu("C'était vraiment super et on s'est bien amusé.");
    // On peut ne pas définir ni la date ni la publication,
    // car ces attributs sont définis automatiquement dans le constructeur
	
	    $article = new Article();
    $article->setTitre('Mon dernier weekend');
    $article->setContenu("C'était vraiment super et on s'est bien amusé.");
    $article->setAuteur('winzou');

    // Création de l'entité Image
    $image = new Image();
    $image->setUrl('http://uploads.siteduzero.com/icones/478001_479000/478657.png');
    $image->setAlt('Logo Symfony2');

    // On lie l'image à l'article
    $article->setImage($image);
	
	 // Création d'un premier commentaire
    $commentaire1 = new Commentaire();
    $commentaire1->setAuteur('winzou');
    $commentaire1->setContenu('On veut les photos !');

    // Création d'un deuxième commentaire, par exemple
    $commentaire2 = new Commentaire();
    $commentaire2->setAuteur('Choupy');
    $commentaire2->setContenu('Les photos arrivent !');

    // On lie les commentaires à l'article
    $commentaire1->setArticle($article);
    $commentaire2->setArticle($article);

    // On récupère l'EntityManager
    $em = $this->getDoctrine()->getManager();

    // Étape 1 : On « persiste » l'entité
    $em->persist($article);
	
	 // Étape 1 bis : si on n'avait pas défini le cascade={"persist"}, on devrait persister à la main l'entité $image
    $em->persist($image);
	
	    // Pour cette relation pas de cascade, car elle est définie dans l'entité Commentaire et non Article
    // On doit donc tout persister à la main ici
    $em->persist($commentaire1);
    $em->persist($commentaire2);

    // Étape 2 : On « flush » tout ce qui a été persisté avant
    $em->flush();
    
	// Les compétences existent déjà, on les récupère depuis la bdd
    $liste_competences = $em->getRepository('SdzBlogBundle:Competence')
                            ->findAll(); // Pour l'exemple, notre Article contient toutes les Competences

    // Pour chaque compétence
    foreach($liste_competences as $i => $competence)
    {
      // On crée une nouvelle « relation entre 1 article et 1 compétence »
      $articleCompetence[$i] = new ArticleCompetence;

      // On la lie à l'article, qui est ici toujours le même
      $articleCompetence[$i]->setArticle($article);
      // On la lie à la compétence, qui change ici dans la boucle foreach
      $articleCompetence[$i]->setCompetence($competence);

      // Arbitrairement, on dit que chaque compétence est requise au niveau 'Expert'
      $articleCompetence[$i]->setNiveau('Expert');

      // Et bien sûr, on persiste cette entité de relation, propriétaire des deux autres relations
      $em->persist($articleCompetence[$i]);
    }

    // On déclenche l'enregistrement
    $em->flush();
	
    // Reste de la méthode qu'on avait déjà écrit
    if ($this->getRequest()->getMethod() == 'POST') {
      $this->get('session')->getFlashBag()->add('info', 'Article bien enregistré');
      return $this->redirect( $this->generateUrl('sdzblog_voir', array('id' => $article->getId())) );
    }

    return $this->render('SdzBlogBundle:Blog:ajouter.html.twig');
  }
  public function modifierAction($id)
  {
    // Ici, on récupérera l'article correspondant à $id

    // Ici, on s'occupera de la création et de la gestion du formulaire

    // return $this->render('SdzBlogBundle:Blog:modifier.html.twig');
	 // $article = array(
      // 'id'      => 1,
      // 'titre'   => 'Mon weekend a Phi Phi Island !',
      // 'auteur'  => 'winzou',
      // 'contenu' => 'Ce weekend était trop bien. Blabla…',
      // 'date'    => new \Datetime()
    // );
        
    // Puis modifiez la ligne du render comme ceci, pour prendre en compte l'article :
    // return $this->render('SdzBlogBundle:Blog:modifier.html.twig', array('article' => $article));
	// On récupère l'EntityManager
    $em = $this->getDoctrine()
               ->getManager();

    // On récupère l'entité correspondant à l'id $id
    $article = $em->getRepository('SdzBlogBundle:Article')
                  ->find($id);

    if ($article === null) {
      throw $this->createNotFoundException('Article[id='.$id.'] inexistant.');
    }

    // On récupère toutes les catégories :
    $liste_categories = $em->getRepository('SdzBlogBundle:Categorie')
                           ->findAll();

    // On boucle sur les catégories pour les lier à l'article
    foreach($liste_categories as $categorie)
    {
      $article->addCategorie($categorie);
    }

    // Inutile de persister l'article, on l'a récupéré avec Doctrine

    // Étape 2 : On déclenche l'enregistrement
    $em->flush();

    return new Response('OK');

  }

  public function supprimerAction($id)
  {
    // Ici, on récupérera l'article correspondant à $id

    // Ici, on gérera la suppression de l'article en question

    // return $this->render('SdzBlogBundle:Blog:supprimer.html.twig');
	 // On récupère l'EntityManager
    $em = $this->getDoctrine()
               ->getManager();

    // On récupère l'entité correspondant à l'id $id
    $article = $em->getRepository('SdzBlogBundle:Article')
                  ->find($id);

    if ($article === null) {
      throw $this->createNotFoundException('Article[id='.$id.'] inexistant.');
    }
    
    // On récupère toutes les catégories :
    $liste_categories = $em->getRepository('SdzBlogBundle:Categorie')
                           ->findAll();
    
    // On enlève toutes ces catégories de l'article
    foreach($liste_categories as $categorie)
    {
      // On fait appel à la méthode removeCategorie() dont on a parlé plus haut
      // Attention ici, $categorie est bien une instance de Categorie, et pas seulement un id
      $article->removeCategorie($categorie);
    }

    // On n'a pas modifié les catégories : inutile de les persister
    
    // On a modifié la relation Article - Categorie
    // Il faudrait persister l'entité propriétaire pour persister la relation
    // Or l'article a été récupéré depuis Doctrine, inutile de le persister
  
    // On déclenche la modification
    $em->flush();

    return new Response('OK');
  }
  public function menuAction($nombre)
  {
    // On fixe en dur une liste ici, bien entendu par la suite on la récupérera depuis la BDD !
	// On pourra récupérer $nombre articles depuis la BDD,
    // avec $nombre un paramètre qu'on peut changer lorsqu'on appelle cette action
    $liste = array(
      array('id' => 2, 'titre' => 'Mon dernier weekend !'),
      array('id' => 5, 'titre' => 'Sortie de Symfony2.1'),
      array('id' => 9, 'titre' => 'Petit test')
    );
        
    return $this->render('SdzBlogBundle:Blog:menu.html.twig', array(
      'liste_articles' => $liste // C'est ici tout l'intérêt : le contrôleur passe les variables nécessaires au template !
    ));
  }
   public function voirSlugAction($slug, $annee, $format)
  {
    // Ici le contenu de la méthode
    return new Response("On pourrait afficher l'article correspondant au slug '".$slug."', créé en ".$annee." et au format ".$format.".");
  }
  public function modifierImageAction($id_article=1)
{
  $em = $this->getDoctrine()->getManager();

  // On récupère l'article
  $article = $em->getRepository('SdzBlogBundle:Article')->find($id_article);

  // On modifie l'URL de l'image par exemple
  $article->getImage()->setUrl('http://bienetre-tunisie.com/img/twitter.png');

  // On n'a pas besoin de persister notre article (si vous le faites, aucune erreur n'est déclenchée, Doctrine l'ignore)
  // Rappelez-vous, il l'est automatiquement car on l'a récupéré depuis Doctrine

  // Pas non plus besoin de persister l'image ici, car elle est également récupérée par Doctrine

  // On déclenche la modification
  $em->flush();

  return new Response('OK');
}
 public function testAction()
{
  $article = new Article();
  $article->setTitre("L'histoire d'un bon weekend !");
  $article->setAuteur('Momo');
  $article->setContenu("ssdfsdfs");
  $article->setdateEdition(new \Datetime());
  $article->setnbCommentaires(0);

  $em = $this->getDoctrine()->getManager();
  $em->persist($article);
  $em->flush(); // C'est à ce moment qu'est généré le slug

  return new Response('Slug généré : '.$article->getSlug()); // Affiche « Slug généré : l-histoire-d-un-bon-weekend »
}
}

// if( $request->getMethod() == 'POST' )
// {
  // Un formulaire a été envoyé, on peut le traiter ici
// }
// if( $request->isXmlHttpRequest() )
// {
  // C'est une requête AJAX, retournons du JSON, par exemple
// }
<?php

namespace Sdz\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
   public function getAvecCategories(array $nom_categories)
  {
    $qb = $this->createQueryBuilder('a');

    // On fait une jointure avec l'entité Categorie, avec pour alias « c »
    $qb ->join('a.categories', 'c')
        ->where($qb->expr()->in('c.nom', $nom_categories)); // Puis on filtre sur le nom des catégories à l'aide d'un IN

    // Enfin, on retourne le résultat
    return $qb->getQuery()
              ->getResult();
  }
    public function getArticles($nombreParPage, $page)
  {
    // $query = $this->createQueryBuilder('a')
                  // ->orderBy('a.date', 'DESC')
                  // ->getQuery();

    // return $query->getResult();
	
	// On déplace la vérification du numéro de page dans cette méthode
    if ($page < 1) {
      throw new \InvalidArgumentException('L\'argument $page ne peut être inférieur à 1 (valeur : "'.$page.'").');
    }
	
	 $query = $this->createQueryBuilder('a')
                  // On joint sur l'attribut image
                  ->leftJoin('a.image', 'i')
                    ->addSelect('i')
                  // On joint sur l'attribut categories
                  ->leftJoin('a.categories', 'c')
                    ->addSelect('c')
                  ->orderBy('a.date', 'DESC')
                  ->getQuery();

    // return $query->getResult();
	
	  // On définit l'article à partir duquel commencer la liste
    $query->setFirstResult(($page-1) * $nombreParPage)
    // Ainsi que le nombre d'articles à afficher
          ->setMaxResults($nombreParPage);

    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
    // (n'oubliez pas le use correspondant en début de fichier)
    return new Paginator($query);
  }
    public function getSelectList()
  {
    $qb = $this->createQueryBuilder('a')
               ->where('a.publication = 1'); // On filtre sur l'attribut publication

    // Et on retourne simplement le QueryBuilder, et non la Query, attention
    return $qb;
  }
}
